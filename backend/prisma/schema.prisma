// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  passwordHash String
  nickname     String
  avatarUrl    String?       // 可选
  bio          String?       // 可选
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // 关系
  studySessions StudySession[]
  blogs         Blog[]
  friends       Friend[]     @relation("UserFriends")
  friendOf      Friend[]     @relation("FriendOf")
  roomMembers   RoomMember[]
  healthData    HealthData[]
  aiReports     AIReport[]
  refreshTokens RefreshToken[]
}

model Friend {
  id        String   @id @default(uuid())
  userId    String
  friendId  String
  status    FriendStatus
  createdAt DateTime @default(now())

  user      User     @relation("UserFriends", fields: [userId], references: [id])
  friend    User     @relation("FriendOf", fields: [friendId], references: [id])
}

enum FriendStatus {
  pending
  accepted
}

model StudySession {
  id              String      @id @default(uuid())
  userId          String
  startTime       DateTime
  endTime         DateTime
  durationMinutes Int
  type            SessionType
  createdAt       DateTime    @default(now())

  user            User        @relation(fields: [userId], references: [id])
}

enum SessionType {
  learning
  rest
}

model Blog {
  id        String   @id @default(uuid())
  userId    String
  title     String
  content   String   // 富文本内容
  tags      String[] // Postgres 数组类型
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
}

model Room {
  id        String       @id @default(uuid())
  name      String
  createdAt DateTime     @default(now())

  members   RoomMember[]
}

model RoomMember {
  id        String       @id @default(uuid())
  roomId    String
  userId    String
  status    RoomStatus
  joinedAt  DateTime     @default(now())
  leftAt    DateTime?

  room      Room         @relation(fields: [roomId], references: [id])
  user      User         @relation(fields: [userId], references: [id])
}

enum RoomStatus {
  learning
  rest
  idle
}

model HealthData {
  id              String   @id @default(uuid())
  userId          String
  date            DateTime
  sleepHours      Float?
  exerciseMinutes Int?
  createdAt       DateTime @default(now())

  user            User     @relation(fields: [userId], references: [id])
}

model AIReport {
  id         String   @id @default(uuid())
  userId     String
  reportText String
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id         String   @id @default(uuid())
  userId     String
  tokenHash  String   // 存储 refresh token 的 SHA-256 摘要（不是明文）
  expiresAt  DateTime
  revokedAt  DateTime?
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([tokenHash])
}